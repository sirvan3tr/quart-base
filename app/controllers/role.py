"""
IMPORTANT: This file is automatically generated. Do not edit directly.

Copyright (c) Sirvan Almasi. All rights reserved.
You must not remove this notice, or any other, from this software.
"""

from quart import (
    Blueprint,
    abort,
    flash,
    redirect,
    render_template,
    request,
    jsonify,
    url_for,
)

from flask_login import (
    current_user,
    login_required,
    login_user,
    logout_user,
)

from app import db
from datetime import date, datetime
from app.models import Role, RoleSchema
from app.forms import NewRoleForm

role = Blueprint('role', __name__, url_prefix='/role')

"""
GET
many and one
"""
@role.route('/', methods=['GET'])
@login_required
def get_role():
    """Endpoint to GET resources from database"""
    id = request.args.get('id', default = None, type = int)
    owner = request.args.get('owner', default = 'False', type = str)
    owner = True if owner == 'True' else False
    schema = get_resource(Role, RoleSchema, force_owner=owner, resource_id=id)
    return json.dumps(schema)

"""
POST
"""
@role.route('/js', methods=['POST'])
@login_required
def create_role():
    data = request.form
    obj = Role(
        )
    db.session.add(obj)
    db.session.commit()
    obj_id = {"status": "OK", "id": obj.id}
    return obj_id 

@role.route('/post', methods=['GET', 'POST'])
@login_required
def new_role_form():
    """ This endpoint is generated automatically. DO NOT edit here."""
    form = NewRoleForm()
    if form.validate_on_submit():
        user_id = int(current_user.get_id())
        
        obj = Role(
            )
        db.session.add(obj)
        db.session.commit()
    return render_template('forms/role.html', form=form)

"""
DELETE
"""
@role.route('/<int:role_id>', methods=['DELETE'])
def delete_role(role_id):
    pass

"""
PUT
"""

###############################################################################
# Functions
###############################################################################
def get_resource(MODEL: db.Model,
                 ModelSchema,
                 force_owner: bool = False,
                 resource_id: int = None) -> list[dict]:
    """ IMPORTANT: This function is generated programmatically. Do not
    modify this directly here.

    Universal funtion to GET resources from a given model."""
    dynamic = []    # list of db.Model
    user_id = None  # authenticated user.id
    if current_user is not None and current_user.is_authenticated:
        user_id = int(current_user.get_id())

    user_types = MODEL.get_user_types()
    user_type = None
    query = MODEL.query
    ############################################################################
    for user_type_index, user_typex in enumerate(user_types):
        user_type = user_typex[1]
        if user_id != None:
            if current_user.is_admin() and user_typex[1] == 'admin':
                break
            elif force_owner == True and user_typex[1] == 'owner':
                query = query.filter_by(owner_id=user_id)
                break
            elif user_typex[0] == 'dynamic':
                user_type = user_typex[0]
                dynamic = user_typex[1]
                for index, model in enumerate(dynamic):
                    if index == 0:
                        query = query.\
                                join(model,model.id==getattr(MODEL,
                                f'{model.__tablename__[:-1]}_id'))
                    else:
                        query = query.\
                                join(model, dynamic[index-1].id==getattr(model,
                                f'{dynamic[index-1].__tablename__[:-1]}_id'))

                    if index == len(dynamic)-1:
                         query = query.filter(dynamic[-1].owner_id==user_id)
                break
            elif user_typex[1] == 'auth':
                break
        elif user_id == None and user_typex[1] == 'anon':
            break
    
    ############################################################################
    if query is None:
        abort(404)

    # Filter the returned resource
    if resource_id != None:
        # should be a .first() but keeping it consistent and returning an
        # array even if it has one element.
        query = query.filter(MODEL.id==int(resource_id)).all()
    else:
        query = query.all()

    # What fields can the user get? Retrieve them from the model.
    fields = MODEL.get_field_permissions(user_type, 'GET')
    schema = ModelSchema(many=True, only=(fields))
    schema_dict = schema.get_dict(query)

    return schema_dict